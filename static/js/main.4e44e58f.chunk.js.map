{"version":3,"sources":["bank.png","mbr.png","MBR_poster.png","components/Navbar.js","components/Airdrop.js","components/Intro.js","components/Static.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","style","backgroundColor","height","color","src","bank","width","alt","opacity","this","props","account","Component","Airdrop","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","time","seconds","timer","startTime","startTimer","bind","assertThisInitialized","countDown","setInterval","setState","secondsToTime","clearInterval","issueTokens","secs","devisor_for_minutes","devisor_for_seconds","h","Math","floor","m","s","ceil","timeLeftVar","stakingBalance","airdropReleaseTokens","Intro","maxWidth","minHeight","MBR_poster","cursor","onClick","window","open","Static","stakers","num_stakers","length","historyAddress","historyAmount","historyType","console","log","border","background","borderRadius","web3","utils","fromWei","totalStaken","result","i","push","key","rendering","scope","Main","id","components_Intro","rwdBalance","onSubmit","event","amount","preventDefault","input","value","toString","toWei","stakeTokens","borderSpacing","marginLeft","marginRight","mbrBalance","ref","type","placeholder","required","mbr","unstakeTokens","unstakeTokensall","components_Airdrop","components_Static","App","loading","methods","approve","decentralBank","_address","send","from","on","hash","depositTokens","rwd","loadWeb3","loadBlockchainData","eth","getAccounts","net","getId","networkId","mbrData","MBR","networks","Contract","abi","address","balanceOf","alert","rwdData","RWD","decentralBankData","DecentralBank","getStakers","getTotalstaken","getAddress","getAmount","getType","ethereum","Web3","enable","currentProvider","content","margin","components_Main","components_Navbar","role","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"41gWAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0sBCyBzBC,mLAnBP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CAA0CC,MAAO,CAACC,gBAAgB,UAAWC,OAAO,SAC/FN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sCAAsCC,MAAO,CAACG,MAAM,UACjEP,EAAAC,EAAAC,cAAA,OAAKM,IAAKC,IAAMH,OAAO,KAAKI,MAAM,KAAKP,UAAU,uBAAuBQ,IAAI,SAD5E,QAEOX,EAAAC,EAAAC,cAAA,yCAEPF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBC,MAAO,CAACC,gBAAgB,QAASO,QAAQ,OACrEZ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oDACVH,EAAAC,EAAAC,cAAA,SAAOE,MAAO,CAACG,MAAM,UAAUP,EAAAC,EAAAC,cAAA,uBAAeW,KAAKC,MAAMC,oBAV5DC,oFCmFNC,cAlFX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAAI,IACVC,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAV,QACKW,MAAQ,CAACC,KAAM,GAAIC,QAAS,MACjCR,EAAKS,MAAQ,EACbT,EAAKU,UAAYV,EAAKW,WAAWC,KAAhBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACjBA,EAAKc,UAAYd,EAAKc,UAAUF,KAAfX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KALPA,4EAUO,GAAdL,KAAKc,OAAcd,KAAKW,MAAME,QAAS,IACtCb,KAAKc,MAAQM,YAAYpB,KAAKmB,UAAW,0CAK7C,IAAIN,EAAUb,KAAKW,MAAME,QAAS,EAGlCb,KAAKqB,SAAS,CACVT,KAAMZ,KAAKsB,cAAcT,GAEzBA,QAASA,IAIE,GAAXA,IACAU,cAAcvB,KAAKc,OAGnBd,KAAKC,MAAMuB,qDAILC,GACV,IAKIC,EAAsBD,EAAI,KAK1BE,EAAsBD,EAAsB,GAUhD,MALU,CACNE,EAdIC,KAAKC,MAAML,EAAI,MAenBM,EAVMF,KAAKC,MAAMJ,EAAsB,IAWvCM,EANMH,KAAKI,KAAKN,gDAcpB,IAAIO,EAAclC,KAAKsB,cAActB,KAAKW,MAAME,SAChDb,KAAKqB,SAAS,CAACT,KAAMsB,mDAINlC,KAAKC,MAAMkC,gBACV,wBACZnC,KAAKgB,8CAMT,OADAhB,KAAKoC,uBAEDjD,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACG,MAAM,UAAWM,KAAKW,MAAMC,KAAKgB,EAA9C,IAAkD5B,KAAKW,MAAMC,KAAKmB,EAAlE,IAAsE/B,KAAKW,MAAMC,KAAKoB,UA7E5E7B,+BCqBPkC,mLAnBP,OACIlD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDAAiDC,MAAO,CAACQ,QAAQ,KAAMuC,SAAS,QAASC,UAAU,UAC9GpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCAAiCH,EAAAC,EAAAC,cAAA,2BAChDF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BC,MAAO,CAAC+C,SAAS,UAA3D,mEACInD,EAAAC,EAAAC,cAAA,WADJ,uDAEIF,EAAAC,EAAAC,cAAA,WAFJ,sFAGIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAA4BK,IAAK6C,IAAY1C,IAAI,MAAML,OAAO,QAAQI,MAAM,UAC3FV,EAAAC,EAAAC,cAAA,WAJJ,4FAKIF,EAAAC,EAAAC,cAAA,WALJ,+CAMIF,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAACG,MAAM,OAAQ+C,OAAO,WAChCC,QAAS,kBAAMC,OAAOC,KAAK,uDAAwD,YADnF,aAGAzD,EAAAC,EAAAC,cAAA,WATJ,kCALIc,aCmEL0C,mLAjEP,IAAMC,EAAU9C,KAAKC,MAAM6C,QACrBC,EAAcD,EAAQE,OAEtBC,EAAiBjD,KAAKC,MAAMgD,eAC5BC,EAAelD,KAAKC,MAAMiD,cAC1BC,EAAanD,KAAKC,MAAMkD,YAkC9B,OAjCAC,QAAQC,IAAIF,GAkCRhE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBC,MAAO,CAAC+D,OAAQ,sBAC9CnE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAsBC,MAAO,CAACG,MAAM,QAAQ6D,WAAW,UAAW9D,OAAO,OAAO+D,aAAa,oBAA3G,iCAAiKrE,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACtKF,EAAAC,EAAAC,cAAA,kCAA4BF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAACG,MAAM,QAASiD,OAAOc,KAAKC,MAAMC,QAAQ3D,KAAKC,MAAM2D,YAAY,UAFhH,6BAEuJzE,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACxJF,EAAAC,EAAAC,cAAA,yCAAmCF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAACG,MAAM,QAASqD,GAHtE,6BAGgH5D,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACjHF,EAAAC,EAAAC,cAAA,sCAAgCF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAACG,MAAM,SA3BvDP,EAAAC,EAAAC,cAAA,WARW,WAEd,IADJ,IAAMwE,EAAS,GACFC,EAAI,EAAGA,EAAIhB,EAAQE,OAAQc,IACpCD,EAAOE,KAAK5E,EAAAC,EAAAC,cAAA,QAAM2E,IAAKF,GAAIhB,EAAQgB,GAAK,MAExC,OAAOD,EAGEI,MA6BT9E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAOH,EAAAC,EAAAC,cAAA,6BACrBF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACG,MAAM,UACdP,EAAAC,EAAAC,cAAA,MAAI6E,MAAM,OAAV,QACA/E,EAAAC,EAAAC,cAAA,MAAI6E,MAAM,OAAV,WACA/E,EAAAC,EAAAC,cAAA,MAAI6E,MAAM,OAAV,YAnBb/E,EAAAC,EAAAC,cAAA,aAbW,WAEd,IADJ,IAAMwE,EAAS,GACFC,EAAI,EAAGA,EAAIb,EAAeD,OAAQc,IAClB,GAAlBX,EAAYW,GACXD,EAAOE,KAAK5E,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAK,SAAaF,EAAAC,EAAAC,cAAA,UAAK4D,EAAea,IAAQ3E,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACG,MAAM,SAAUiD,OAAOc,KAAKC,MAAMC,QAAQT,EAAcY,GAAG,YAGrID,EAAOE,KAAK5E,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAK,WAAeF,EAAAC,EAAAC,cAAA,UAAK4D,EAAea,IAAQ3E,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACG,MAAM,QAASiD,OAAOc,KAAKC,MAAMC,QAAQT,EAAcY,GAAG,YAG9I,OAAOD,EAGII,cArCN9D,aC8GNgE,mLA1GF,IAAA9D,EAAAL,KAGL,OACIb,EAAAC,EAAAC,cAAA,OAAK+E,GAAG,UAAU9E,UAAU,4BAA4BC,MAAO,CAACQ,QAAQ,OACpEZ,EAAAC,EAAAC,cAACgF,EAAD,MACAlF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAAC+D,OAAQ,sBAClCnE,EAAAC,EAAAC,cAAA,SAAOC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACG,MAAM,UACdP,EAAAC,EAAAC,cAAA,MAAI6E,MAAM,OAAV,mBACA/E,EAAAC,EAAAC,cAAA,MAAI6E,MAAM,OAAV,oBAGR/E,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACG,MAAM,UACdP,EAAAC,EAAAC,cAAA,UAAKsD,OAAOc,KAAKC,MAAMC,QAAQ3D,KAAKC,MAAMkC,eAAe,SAAzD,QACAhD,EAAAC,EAAAC,cAAA,UAAKsD,OAAOc,KAAKC,MAAMC,QAAQ3D,KAAKC,MAAMqE,WAAW,SAArD,WAIZnF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,MAAO,CAACQ,QAAQ,OACvCZ,EAAAC,EAAAC,cAAA,QACAkF,SAAU,SAACC,GAIP,IAAIC,EAHJD,EAAME,iBAIND,EAASpE,EAAKsE,MAAMC,MAAMC,WAG1BJ,EAAS9B,OAAOc,KAAKC,MAAMoB,MAAML,EAAQ,SACzCpE,EAAKJ,MAAM8E,YAAYN,IAG3BnF,UAAU,QACNH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACyF,cAAc,UACvB7F,EAAAC,EAAAC,cAAA,SAAOC,UAAU,4BAA4BC,MAAO,CAAC0F,WAAW,SAAS9F,EAAAC,EAAAC,cAAA,0BACzEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAwBC,MAAO,CAAC2F,YAAY,QACxD/F,EAAAC,EAAAC,cAAA,qBADJ,KACsBsD,OAAOc,KAAKC,MAAMC,QAAQ3D,KAAKC,MAAMkF,WAAW,UAEtEhG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,SAAOE,MAAO,CAACE,OAAO,OAAQI,MAAM,SACpCuF,IAAK,SAACT,GAAUtE,EAAKsE,MAAQA,GAG7BU,KAAK,OACLC,YAAY,IACZC,UAAQ,IACRpG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKM,IAAK6F,IAAK1F,IAAI,MAAML,OAAO,SADpC,aAMRN,EAAAC,EAAAC,cAAA,UAAQgG,KAAK,SAAS/F,UAAU,wDAAwDC,MAAO,CAACgE,WAAW,UAAWD,OAAQ,MAAOzD,MAAM,UAAUV,EAAAC,EAAAC,cAAA,uBAG7JF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,UAAQgG,KAAK,SACT3C,QAAS,SAAC8B,GAGN,IAAIC,EAFJD,EAAME,iBAGND,EAASpE,EAAKsE,MAAMC,MAAMC,WAG1BJ,EAAS9B,OAAOc,KAAKC,MAAMoB,MAAML,EAAQ,SACzCpE,EAAKJ,MAAMwF,cAAchB,IAGjCnF,UAAU,mCAAmCC,MAAO,CAACM,MAAM,QAASJ,OAAO,OAAO8D,WAAW,UAAWD,OAAO,QAAQnE,EAAAC,EAAAC,cAAA,uBAE3HF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,UAAQgG,KAAK,SACT3C,QAAS,SAAC8B,GACNA,EAAME,iBAENrE,EAAKJ,MAAMyF,oBAGnBpG,UAAU,mCAAmCC,MAAO,CAACM,MAAM,OAAQJ,OAAO,OAAQ8D,WAAW,UAAWD,OAAO,QAAQnE,EAAAC,EAAAC,cAAA,oBAInIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAwBC,MAAO,CAACG,MAAM,SACjDP,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACsG,EAAD,CACIxD,eAAkBnC,KAAKC,MAAMkC,eAC7BX,YAAexB,KAAKC,MAAMuB,gBAGtCrC,EAAAC,EAAAC,cAACuG,EAAD,CACIhC,YAAc5D,KAAKC,MAAM2D,YACzBd,QAAU9C,KAAKC,MAAM6C,QACrBG,eAAiBjD,KAAKC,MAAMgD,eAC5BC,cAAgBlD,KAAKC,MAAMiD,cAC3BC,YAAcnD,KAAKC,MAAMkD,sBApG1BhD,aC0OJ0F,cA/DX,SAAAA,EAAY5F,GAAO,IAAAI,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAA6F,IACfxF,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAuF,GAAAnF,KAAAV,KAAMC,KA5CV8E,YAAc,SAACN,GACXpE,EAAKgB,SAAS,CAACyE,SAAQ,IAIvBzF,EAAKM,MAAM6E,IAAIO,QAAQC,QAAQ3F,EAAKM,MAAMsF,cAAcC,SAAUzB,GAAQ0B,KAAK,CAACC,KAAM/F,EAAKM,MAAMT,UAAUmG,GAAG,kBAAmB,SAACC,GAG9HjG,EAAKM,MAAMsF,cAAcF,QAAQQ,cAAc9B,GAAQ0B,KAAK,CAACC,KAAM/F,EAAKM,MAAMT,UAAUmG,GAAG,kBAAmB,SAACC,GAG3GjG,EAAKgB,SAAS,CAACyE,SAAQ,SAgChBzF,EA1BnBoF,cAAgB,SAAChB,GACbpE,EAAKgB,SAAS,CAACyE,SAAQ,IAEvBzF,EAAKM,MAAMsF,cAAcF,QAAQN,cAAchB,GAAQ0B,KAAK,CAACC,KAAM/F,EAAKM,MAAMT,UAAUmG,GAAG,kBAAmB,SAACC,GAC3GjG,EAAKgB,SAAS,CAACyE,SAAQ,OAsBZzF,EAlBnBqF,iBAAmB,WACfrF,EAAKgB,SAAS,CAACyE,SAAQ,IAEvBzF,EAAKM,MAAMsF,cAAcF,QAAQL,mBAAmBS,KAAK,CAACC,KAAM/F,EAAKM,MAAMT,UAAUmG,GAAG,kBAAmB,SAACC,GACxGjG,EAAKgB,SAAS,CAACyE,SAAQ,OAcZzF,EAVnBmB,YAAc,WACVnB,EAAKgB,SAAS,CAACyE,SAAQ,IAEvBzF,EAAKM,MAAMsF,cAAcF,QAAQvE,cAAc2E,KAAK,CAACC,KAAM/F,EAAKM,MAAMT,UAAUmG,GAAG,kBAAmB,SAACC,GACnGjG,EAAKgB,SAAS,CAACyE,SAAQ,OAQ3BzF,EAAKM,MAAQ,CACTT,QAAS,MACTsF,IAAK,GACLgB,IAAK,GACLP,cAAe,GACfd,WAAY,IACZb,WAAY,IACZnC,eAAgB,IAChByB,YAAa,IACbd,QAAS,GACTG,eAAgB,GAChBC,cAAe,GACfC,YAAa,GACb2C,SAAS,GAfEzF,4MA/JTL,KAAKyG,kCAELzG,KAAK0G,yTAKLjD,EAAOd,OAAOc,cACEA,EAAKkD,IAAIC,4BAAzB1G,SAGNF,KAAKqB,SAAS,CAACnB,QAASA,EAAQ,cAKRuD,EAAKkD,IAAIE,IAAIC,kBAA/BC,WAQAC,EAAUC,EAAIC,SAASH,4BAKnBvB,EAAM,IAAI/B,EAAKkD,IAAIQ,SAASF,EAAIG,IAAKJ,EAAQK,SAGnDrH,KAAKqB,SAAS,CAACmE,kBAIQA,EAAIO,QAAQuB,UAAUtH,KAAKW,MAAMT,SAASQ,eAA7DyE,SAGJnF,KAAKqB,SAAS,CAAC8D,WAAYA,EAAWN,qCAOtClC,OAAO4E,MAAM,0CAKXC,EAAUC,EAAIP,SAASH,4BAGnBP,EAAM,IAAI/C,EAAKkD,IAAIQ,SAASM,EAAIL,IAAKI,EAAQH,SAEnDrH,KAAKqB,SAAS,CAACmF,kBAEQA,EAAIT,QAAQuB,UAAUtH,KAAKW,MAAMT,SAASQ,eAA7D4D,SACJtE,KAAKqB,SAAS,CAACiD,WAAYA,EAAWO,qCAKtClC,OAAO4E,MAAM,0CAKXG,EAAoBC,EAAcT,SAASH,4BAGvCd,EAAgB,IAAIxC,EAAKkD,IAAIQ,SAASQ,EAAcP,IAAKM,EAAkBL,SACjFrH,KAAKqB,SAAS,CAAC4E,4BAEYA,EAAcF,QAAQ5D,eAAenC,KAAKW,MAAMT,SAASQ,sBAAhFyB,SACJnC,KAAKqB,SAAS,CAACc,eAAgBA,EAAe0C,uBAE1BoB,EAAcF,QAAQ6B,aAAalH,sBAAnDoC,SACJ9C,KAAKqB,SAAS,CAACyB,QAASA,cAGAmD,EAAcF,QAAQ8B,iBAAiBnH,sBAA3DkD,SACJ5D,KAAKqB,SAAS,CAACuC,YAAaA,EAAYiB,uBAGboB,EAAcF,QAAQ+B,aAAapH,sBAA1DuC,mBACsBgD,EAAcF,QAAQgC,YAAYrH,sBAAxDwC,mBACoB+C,EAAcF,QAAQiC,UAAUtH,eAApDyC,SACJnD,KAAKqB,SAAS,CAAC4B,eAAeA,IAC9BjD,KAAKqB,SAAS,CAAC6B,cAAcA,IAC7BlD,KAAKqB,SAAS,CAAC8B,YAAYA,4BAG3BR,OAAO4E,MAAM,+CAIjBvH,KAAKqB,SAAS,CAACyE,SAAQ,sPAKhBnD,OAAOsF,gCACNtF,OAAOc,KAAO,IAAIyE,IAAKvF,OAAOsF,mBACxBtF,OAAOsF,SAASE,sCAEjBxF,OAAOc,KACZd,OAAOc,KAAO,IAAIyE,IAAKvF,OAAOc,KAAK2E,iBAGnCzF,OAAO4E,MAAM,gKA0ErB,IAAIc,EAqBJ,OAnBAA,EADCrI,KAAKW,MAAMmF,QACF3G,EAAAC,EAAAC,cAAA,KAAG+E,GAAG,SAAS9E,UAAU,cAAcC,MAAO,CAAC+I,OAAO,SAAtD,0BAEMnJ,EAAAC,EAAAC,cAACkJ,EAAD,CAChBpD,WAAYnF,KAAKW,MAAMwE,WACvBb,WAAYtE,KAAKW,MAAM2D,WACvBnC,eAAgBnC,KAAKW,MAAMwB,eAC3ByB,YAAc5D,KAAKW,MAAMiD,YACzBd,QAAU9C,KAAKW,MAAMmC,QACrBG,eAAiBjD,KAAKW,MAAMsC,eAC5BC,cAAgBlD,KAAKW,MAAMuC,cAC3BC,YAAcnD,KAAKW,MAAMwC,YACzB4B,YAAc/E,KAAK+E,YACnBU,cAAgBzF,KAAKyF,cACrBjE,YAAaxB,KAAKwB,YAClBkE,iBAAmB1F,KAAK0F,mBAMpBvG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACmJ,EAAD,CAAQtI,QAAWF,KAAKW,MAAMT,UAC9Bf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,QAAMoJ,KAAK,OAAOnJ,UAAU,4BAA4BC,MAAO,CAAC+C,SAAS,QAASC,UAAU,UACxFpD,EAAAC,EAAAC,cAAA,WACKgJ,cA1NflI,aCDEuI,QACW,cAA7B/F,OAAOgG,SAASC,UAEe,UAA7BjG,OAAOgG,SAASC,UAEhBjG,OAAOgG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5J,EAAAC,EAAAC,cAAC2J,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4e44e58f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bank.589bd4ec.png\";","module.exports = __webpack_public_path__ + \"static/media/mbr.7c1a1027.png\";","module.exports = __webpack_public_path__ + \"static/media/MBR_poster.c498cac0.png\";","import React, {Component} from 'react'\nimport bank from '../bank.png'\n\n\nclass Navbar extends Component {\n    render() {\n        return (\n            <nav className='navbar navbar-dark fixed-top shadow p-0' style={{backgroundColor:'#F4C16B', height:'80px'}}>\n                <a className='navbar-brand col-sm-3 col-md-2 mr-0' style={{color:'white'}}>\n                <img src={bank} height='70' width='70' className='d-inline-block-align' alt='bank'/>\n                &nbsp; <b>DAPP MBR Decentralized Bank</b>\n                </a>\n                <ul className='navbar-nav px-3' style={{backgroundColor:'white', opacity:'.5'}}>\n                    <li className='text-nowrap d-none nav-item d-sm-none d-sm-block'>\n                        <small style={{color:'black'}}><b>ACCOUNT :  {this.props.account}</b>\n                        </small>\n                    </li>\n                </ul>\n            </nav>\n        )\n    }\n}\n// we do not need to use className when we touch img file because img itself can bring img source.\n// &nbsp; means blank\n\nexport default Navbar;","import React, {Component} from 'react'\n\n\nclass Airdrop extends Component {\n    \n    constructor() {\n        super()\n        this.state = {time: {}, seconds: 3600};\n        this.timer = 0;\n        this.startTime = this.startTimer.bind(this);\n        this.countDown = this.countDown.bind(this);\n        //? binding, we can call or find startTime\n    }\n\n    startTimer() {\n        if(this.timer == 0 && this.state.seconds >0) {\n            this.timer = setInterval(this.countDown, 1000);\n        }\n    }\n    \n    countDown() {\n        let seconds = this.state.seconds -1 \n        // count 1\n\n        this.setState({\n            time: this.secondsToTime(seconds),\n            //convert\n            seconds: seconds\n            // update seconds\n        })\n\n        if (seconds == 0) {\n            clearInterval(this.timer)\n            // stop the count down\n\n            this.props.issueTokens()\n        }\n    }\n\n    secondsToTime(secs) {\n        let hours, seconds, minutes\n\n        hours = Math.floor(secs / (60 * 60))\n        // 5.55 hour => 5 hour\n\n        let devisor_for_minutes = secs % (60 * 60)\n        // remainder for minutes\n        minutes = Math.floor(devisor_for_minutes / 60)\n        // 5.55 minutes => 5 minutes\n\n        let devisor_for_seconds = devisor_for_minutes % 60\n        // remainder for seconds\n        seconds = Math.ceil(devisor_for_seconds)\n        // upper value\n\n        let obj = {\n            'h':hours,\n            'm':minutes,\n            's':seconds\n        }\n        return obj\n    }\n\n    /* because it is not async, we do not need to wait until the other\n    contracts render first thus we call after mount*/\n    componentDidMount() {\n        let timeLeftVar = this.secondsToTime(this.state.seconds)\n        this.setState({time: timeLeftVar})\n    }\n\n    airdropReleaseTokens() {\n        let stakingB = this.props.stakingBalance\n        if (stakingB >= '50000000000000000000') {\n            this.startTimer()\n        }\n    }\n\n    render() {\n        this.airdropReleaseTokens()\n        return ( \n            <div style={{color:'black'}}>{this.state.time.h}:{this.state.time.m}:{this.state.time.s}\n            </div>\n        )\n    }\n    // timeLeftVar -> Airdrop -> Main.js -> App.js -> React DOM -> network\n}\n\nexport default Airdrop;","import React, {Component} from 'react'\nimport MBR_poster from '../MBR_poster.png'\n\nclass Intro extends Component {\n    render() {\n        return (\n            <div className='d-flex flex-column text-center mr-auto ml-auto' style={{opacity:'.9', maxWidth:'670px', minHeight:'100vm'}}>\n                <div className='p-2 mb-3 mt-5 font-weight-bold'><h2>Hello, there</h2></div>   \n                <div className='p-2 ml-auto mr-auto mb-3' style={{maxWidth:'800px'}}>Welcome! MBN is a crypto-coin established on January 28th, 2023. \n                    <br/>It was created by JunBro, C.T.O of the SJH company . \n                    <br/>This cryptoCurrency havs a symbolic meaning of the footsteps of MakBangRu with SJH. \n                    <img className='ml-auto mr-auto mt-4 mb-4' src={MBR_poster} alt='MBR' height='500px' width='400px'/>\n                    <br/>You can also meet the MakBangRu daily life at 'mbr_lovelys' instargram. Anytime visit us! \n                    <br/>For the more infomation about SJH, Visit our \n                    <b style={{color:'gray', cursor:'pointer'}}\n                    onClick={() => window.open('https://junbro1908.github.io/firstweb/src/index.html', '_blank')}\n                    > website </b> \n                    <br/>Then, have a nice day~\n                </div>            \n            </div>\n        )\n    }\n}\n\nexport default Intro;","import React, {Component} from 'react'\n\n\nclass Static extends Component {\n    render() {\n        const stakers = this.props.stakers\n        const num_stakers = stakers.length\n\n        const historyAddress = this.props.historyAddress \n        const historyAmount= this.props.historyAmount\n        const historyType= this.props.historyType\n        console.log(historyType)\n\n        function eachStakers() {\n            \n            const rendering = () => {\n            const result = [];\n                for (let i = 0; i < stakers.length; i++) {\n                result.push(<span key={i}>{stakers[i] + \" \"}</span>);\n                }\n                return result;\n            };\n            \n            return <div>{rendering()}</div>;\n        }\n\n        function stakingHistory() {\n            const rendering = () => {\n            const result = [];\n                for (let i = 0; i < historyAddress.length; i++) {\n                    if(historyType[i] == 0) {\n                        result.push(<tr><td>{'stake'}</td><td>{historyAddress[i]}</td><td style={{color:'blue'}}>{window.web3.utils.fromWei(historyAmount[i],'Ether')}</td></tr>);\n                    }\n                    else {\n                        result.push(<tr><td>{'unstake'}</td><td>{historyAddress[i]}</td><td style={{color:'red'}}>{window.web3.utils.fromWei(historyAmount[i],'Ether')}</td></tr>);\n                    }\n                };\n                return result;\n            };\n            \n            return <tbody>{rendering()}</tbody>;\n        }\n\n\n        return (\n            <div className='text-center mt-5' style={{border: '1px solid #8B572A'}}>\n                <div>\n                    <h2 className='mt-4 ml-3 mr-3 pt-2' style={{color:'white',background:'#d49863', height:'60px',borderRadius:'5px 5px 5px 5px'}}>The Figure of MBR mock tokens</h2><br/><br/>\n                    <b>Total amount of stake</b><br/><b style={{color:'red'}}>{window.web3.utils.fromWei(this.props.totalStaken,'Ether')}</b> MBR is currently staking!<br/><br/>\n                    <b>How many wallets are staking</b><br/><b style={{color:'red'}}>{num_stakers}</b> addresses are connected! <br/><br/>\n                    <b>Currently staking address</b><br/><p style={{color:'gray'}}>{eachStakers()}</p>\n                </div>\n                <div className='mt-4 ml-3 mr-3'>\n                    <h4 className='mb-3'><b>Staking history</b></h4>\n                    <table className='table text-muted text-center mt-1'>\n                        <thead>\n                            <tr style={{color:'black'}}>\n                                <th scope='col'>Type</th>\n                                <th scope='col'>Address</th>\n                                <th scope='col'>Amount</th>\n                            </tr>\n                        </thead>\n                        {stakingHistory()}\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Static;","import React, {Component} from 'react'\nimport mbr from '../mbr.png'\nimport Airdrop from './Airdrop.js'\nimport Intro from './Intro.js'\nimport Static from './Static.js'\n\nclass Main extends Component {\n    render() {\n        // console.log(this.props.mbrBalance)\n\n        return (\n            <div id='content' className='mt-5 mb-5 mr-auto ml-auto' style={{opacity:'.9'}}>\n                <Intro/>\n                <div className='mt-5' style={{border: '1px solid #8B572A'}}>\n                    <table className='table text-muted text-center mt-5'>\n                        <thead>\n                            <tr style={{color:'black'}}>\n                                <th scope='col'>Staking Balance</th>\n                                <th scope='col'>Reward Balance</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr style={{color:'black'}}>\n                                <td>{window.web3.utils.fromWei(this.props.stakingBalance,'Ether')} MBR</td>\n                                <td>{window.web3.utils.fromWei(this.props.rwdBalance,'Ether')} RWD</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div className='card mb-2' style={{opacity:'.9'}}>\n                        <form \n                        onSubmit={(event) => {\n                            event.preventDefault()\n                            // prevent multiple progress when click many times\n\n                            let amount\n                            amount = this.input.value.toString()\n                            // value of the input (string)\n\n                            amount = window.web3.utils.toWei(amount, 'Ether')\n                            this.props.stakeTokens(amount)\n                            //call the function\n                        }}\n                        className='mb-3'>\n                            <div style={{borderSpacing:'0 rem'}}>\n                                <label className='float-left ml-5 mt-3 mb-3' style={{marginLeft:'15px'}}><b>Stake Tokens</b></label>\n                                <span className='float-right mr-5 mt-3' style={{marginRight:'8px'}}>\n                                    <b>Budget :</b>  {window.web3.utils.fromWei(this.props.mbrBalance,'Ether')}\n                                </span>\n                                <div className='input-group mb-4 ml-5'>\n                                    <input style={{height:'53px', width:'140px'}}\n                                    ref={(input)=> {this.input = input}}\n                                    // set argument of this function equal to this.input\n\n                                    type='text'\n                                    placeholder='0'\n                                    required />\n                                    <div className='input-group-open'>\n                                        <div className='input-group-text'>\n                                            <img src={mbr} alt='mbr' height='40px'/>\n                                            &nbsp;MBR\n                                        </div>\n                                    </div>\n                                </div>\n                                <button type='summit' className='btn btn-primary btn-lg btn-block ml-auto mr-auto mt-5' style={{background:'#8B572A', border: '0px', width:'400px'}}><b>DEPOSIT</b></button>\n                            </div>\n                        </form>\n                        <div className='row ml-auto mr-auto mb-3'>\n                            <div className=\"col-sm\">\n                                <button type='summit' \n                                    onClick={(event) => {\n                                        event.preventDefault()\n\n                                        let amount\n                                        amount = this.input.value.toString()\n                                        // value of the input (string)\n\n                                        amount = window.web3.utils.toWei(amount, 'Ether')\n                                        this.props.unstakeTokens(amount)\n                                        //call the function\n                                }}\n                                className='btn btn-primary btn-lg btn-block' style={{width:'300px', height:'50px',background:'#8B572A', border:'0px'}}><b>WITHDRAW</b></button>\n                            </div>\n                            <div className=\"col-sm\">\n                                <button type='summit' \n                                    onClick={(event) => {\n                                        event.preventDefault()\n                                    \n                                        this.props.unstakeTokensall()\n                                        //call the function\n                                }}\n                                className='btn btn-primary btn-lg btn-block' style={{width:'70px', height:'50px', background:'#8B572A', border:'0px'}}><b>ALL</b></button>\n                            </div>\n                        </div>\n                    </div>\n                    <div className='text-center mt-1 mb-3' style={{color:'gray'}}>\n                        <b>AIRDROP</b>\n                        <Airdrop \n                            stakingBalance = {this.props.stakingBalance} \n                            issueTokens = {this.props.issueTokens}/> \n                    </div>\n                </div>\n                <Static\n                    totalStaken= {this.props.totalStaken}\n                    stakers= {this.props.stakers}\n                    historyAddress= {this.props.historyAddress} \n                    historyAmount= {this.props.historyAmount}\n                    historyType= {this.props.historyType}/>\n            </div>\n        )\n    }\n    // to get props of main we should announce props beside the component\n}\n\nexport default Main;","import React, {Component} from 'react'\n// get react\nimport './App.css'\nimport Navbar from './Navbar';\n// get css and Navbar files\nimport Web3 from 'web3';\nimport MBR from '../truffle_abis/MBR.json'\n// to connect the network, network Id is needed. and it save in truffle_abis > network > Id\nimport RWD from '../truffle_abis/RWD.json'\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\nimport Main from './Main.js'\n\n\nclass App extends Component {\n    \n\n    // componentWillMount function call loadweb3 immediately(before mount)\n    async componentWillMount() {\n        await this.loadWeb3()\n        // call loadweb3\n        await this.loadBlockchainData()\n    }\n\n     // get block chain data\n    async loadBlockchainData() {\n        const web3 = window.web3\n        const account = await web3.eth.getAccounts()\n        // get accounts using web3.eth.getAccounts and put it const var\n        \n        this.setState({account: account[0]})\n        //update account info first\n\n        //console.log(account)\n    \n        const networkId = await web3.eth.net.getId()\n        /* get network id. we use ganache and it's id is 5777\n        first we get network id by using web3 methods and set variable   */\n        \n        //console.log(networkId, 'Network ID')\n\n\n        // load mbr contract\n        const mbrData = MBR.networks[networkId]\n        // use network id, we set mbr network and make mbrData\n\n        //if mbr data is true = exist\n        if(mbrData) {\n            const mbr = new web3.eth.Contract(MBR.abi, mbrData.address)\n            // get contract abi and address, make new instance mbr\n\n            this.setState({mbr})\n            /* we get mbr contract as an object in to the state\n            if contract changed state will be update */\n            \n            let mbrBalance = await mbr.methods.balanceOf(this.state.account).call()\n            /* as we announce before we get mbr info through web3 methods and we already set address in state\n            get it from web3 thus we should put methods and it is call back function(method) so we put .call() */\n            this.setState({mbrBalance: mbrBalance.toString()})\n            // we get mbr balance, change as string and put it in to state.\n\n            //console.log({balance: mbrBalance})\n        }\n        else {\n        // can not bring mbr data\n            window.alert('mbr contract not deployed')\n        }\n\n\n        //load rwd\n        const rwdData = RWD.networks[networkId]\n        \n        if(rwdData) {\n            const rwd = new web3.eth.Contract(RWD.abi, rwdData.address)\n\n            this.setState({rwd})\n\n            let rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\n            this.setState({rwdBalance: rwdBalance.toString()})\n            \n            //console.log({rwdBalance: rwdBalance})\n        }\n        else {\n            window.alert('rwd contract not deployed')\n        }\n        \n \n        //load decentralBank\n        const decentralBankData = DecentralBank.networks[networkId]\n\n        if(decentralBankData) {\n            const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\n            this.setState({decentralBank})\n\n            let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\n            this.setState({stakingBalance: stakingBalance.toString()})\n\n            var stakers = await decentralBank.methods.getStakers().call()\n            this.setState({stakers: stakers})\n            // get stakers address as array\n\n            let totalStaken = await decentralBank.methods.getTotalstaken().call()\n            this.setState({totalStaken: totalStaken.toString()})\n            // get total staken tokens\n\n            let historyAddress = await decentralBank.methods.getAddress().call()\n            let historyAmount = await decentralBank.methods.getAmount().call()\n            let historyType = await decentralBank.methods.getType().call()\n            this.setState({historyAddress:historyAddress})\n            this.setState({historyAmount:historyAmount})\n            this.setState({historyType:historyType})\n        }\n        else {\n            window.alert('decentralBank contract not deployed')\n        }\n\n        // get all contract, finally no more loading thus we put false\n        this.setState({loading:false})\n    }\n\n        //connect blockchain(metamask) to react. we should use await and async to get data each steps\n        async loadWeb3() {\n            if(window.ethereum) {\n                window.web3 = new Web3(window.ethereum)\n                await window.ethereum.enable()\n            } // if ethereum is detected, make new instance Web3 and enable it\n            else if (window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider)\n            } // if web3 is detected by currentProvider make new instance Web3\n            else {\n                window.alert('no connection')\n            } // if ethereum and web3 is not detected make an alarm\n        }\n\n    // stake button : approval -> transferFrom -> deposit tokens -> staking enable\n    stakeTokens = (amount) => {\n        this.setState({loading:true})\n        // content = loading..\n\n        // approve -> deposit\n        this.state.mbr.methods.approve(this.state.decentralBank._address, amount).send({from: this.state.account}).on('transactionHash', (hash) => {\n        // approve decentralBank address to use X amount of money\n            \n            this.state.decentralBank.methods.depositTokens(amount).send({from: this.state.account}).on('transactionHash', (hash) => {\n            // get decentralBank object from 'this.state' and we use depositTokens function. put amount and customer's address and execute transaction.\n                \n                this.setState({loading:false})\n                // content = <Main.js />\n            })\n        })\n    }\n\n    unstakeTokens = (amount) => {\n        this.setState({loading:true})\n\n        this.state.decentralBank.methods.unstakeTokens(amount).send({from: this.state.account}).on('transactionHash', (hash) => {\n            this.setState({loading:false})\n        })\n    }\n\n    unstakeTokensall = () => {\n        this.setState({loading:true})\n\n        this.state.decentralBank.methods.unstakeTokensall().send({from: this.state.account}).on('transactionHash', (hash) => {\n            this.setState({loading:false})\n        })\n    }\n\n    issueTokens = () => {\n        this.setState({loading:true})\n\n        this.state.decentralBank.methods.issueTokens().send({from: this.state.account}).on('transactionHash', (hash) => {\n            this.setState({loading:false})\n        })\n    }\n\n\n    // put initial value\n    constructor(props) {\n        super(props)\n        this.state = {\n            account: \"0x0\",\n            mbr: {},\n            rwd: {},\n            decentralBank: {},\n            mbrBalance: '0',\n            rwdBalance: '0',\n            stakingBalance: '0',\n            totalStaken: '0',\n            stakers: [],\n            historyAddress: [],\n            historyAmount: [],\n            historyType: [],\n            loading: true\n        }\n    }\n    /* the way to interact dynamically about account : this.state -> constructor(props)\n     -> Navbar account={this.state.account} -> Navbar.js -> {this.props.account} */\n\n    // put react code here\n    render() {\n\n        /* make loading. if we access main component before loading data, collapse happens \n        thus before loading state become 'false', we should print loading page so that we can prevent error*/\n        let content\n        {this.state.loading ? \n        content = <p id='loader' className='text-center' style={{margin:'30px'}}>\n        LOADING PLEASE WAIT...\n        </p> : content= <Main\n        mbrBalance={this.state.mbrBalance}\n        rwdBalance={this.state.rwdBalance}\n        stakingBalance={this.state.stakingBalance}\n        totalStaken= {this.state.totalStaken}\n        stakers= {this.state.stakers}\n        historyAddress= {this.state.historyAddress} \n        historyAmount= {this.state.historyAmount}\n        historyType= {this.state.historyType}\n        stakeTokens= {this.stakeTokens}\n        unstakeTokens= {this.unstakeTokens}\n        issueTokens={this.issueTokens}\n        unstakeTokensall= {this.unstakeTokensall}\n        // get props so that in Main.js we can access these props\n        />}\n        \n        \n        return (\n            <div>\n                <Navbar account = {this.state.account}/>\n                <div className='container-fluid mt-5'>\n                    <div className='col'>\n                        <main role='main' className='col-lg-12 ml-auto mr-auto' style={{maxWidth:'700px', minHeight:'100vm'}}>\n                            <div>\n                                {content}\n                            </div>\n                        </main>\n                    </div> \n                </div>\n            </div>\n        )\n    }\n}\nexport default App;\n// export app file and progress rendering\n// rendering pages one by one : true * n and then false print","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n/* we import react dom and import App that what we want to render\nthus this code make App enalble to creacte website / getting from bootstrap instead of css code\n*/\nserviceWorker.unregister();\n"],"sourceRoot":""}